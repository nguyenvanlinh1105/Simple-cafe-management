package com.cafe.dao.impl;

import java.sql.Connection;
import java.sql.Date;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.sql.Types;
import java.util.ArrayList;
import java.util.List;

import com.cafe.dao.GenericDAO;
import com.cafe.mapper.RowMapper;

public abstract class AbstractDAO<T> implements GenericDAO<T> {
	
	public Connection getConnection() throws SQLException {
	    String dbUrl = "jdbc:sqlserver://LAPTOP-RFH2LVGG\\SQLSERVER1:1433;databaseName=QuanLyCafe;user=sa;password=sa;encrypt=false;";
	    try {
	        Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
	        return DriverManager.getConnection(dbUrl);
	    } catch (ClassNotFoundException | SQLException e) {
	        e.printStackTrace();
	        throw new SQLException("SQL Server JDBC Driver not found", e);
	    }
	}


	@Override
	public <T> List<T> query(String sql, RowMapper<T> rowMapper, Object... parameter) {
		List<T> results = new ArrayList();
		Connection connection =null;
		PreparedStatement statement=null;
		ResultSet resultSet = null;
		try {
			connection = getConnection();	
			statement = connection.prepareStatement(sql);
			setParameter(statement, parameter);
			resultSet = statement.executeQuery();
			while(resultSet.next()) {
				results.add(rowMapper.mapRow(resultSet));
			}
			return results;
		}catch(SQLException ex) {
			ex.printStackTrace();
		}finally {
	        try {
	            if(connection != null) {
	                connection.close();
	            }
	            if(statement != null) {
	                statement.close();
	            }
	            if(resultSet != null) {
	                resultSet.close();
	            }
	        } catch (SQLException e) {
	            e.printStackTrace();
	        }
	    }
		return null;
	}

	protected void setParameter(PreparedStatement statement, Object... parameters) {
		try {
			for (int i = 0; i < parameters.length; i++) {
				Object parameter = parameters[i];
				int index = i + 1;
				if (parameter instanceof Long) {
					statement.setLong(index, (long) parameter);
				}else if (parameter instanceof String) {
					statement.setString(index, (String) parameter);
				}else if (parameter instanceof Integer) {
					statement.setInt(index, (int) parameter);
				}else if (parameter instanceof Double) {
					statement.setDouble(index, (Double) parameter);
				} else if (parameter instanceof Float) {
					statement.setFloat(index, (Float) parameter);
				} else if (parameter instanceof Timestamp) {
					statement.setTimestamp(index, (Timestamp) parameter);
				} else if (parameter instanceof Date) {
					statement.setDate(index, (Date) parameter);
				} else if (parameter == null) {
					statement.setNull(index, Types.NULL);
				} 

			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	};
	
	@Override
	public void update(String sql, Object... parameters) {
		Connection connection = null;
		PreparedStatement statement = null;
		try {
			connection = getConnection();
			connection.setAutoCommit(false);
			statement = connection.prepareStatement(sql);
			setParameter(statement, parameters);
			statement.executeUpdate();
			connection.commit();

		} catch (SQLException e) {
			e.printStackTrace();
			if (connection != null) {
				try {
					connection.rollback();
				} catch (SQLException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
			}
		} finally {
			try {
				if (connection != null) {
					connection.close();
				}
				if (statement != null) {
					statement.close();
				}
			} catch (SQLException e) {
				e.printStackTrace();
			}

		}
	}
	
	@Override
	public int count(String sql, Object... parameters) {
		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet resultSet = null;
		try {
			int count =0;
			connection = getConnection();
			statement = connection.prepareStatement(sql);
			// setParameter;
			setParameter(statement, parameters);
			// excute
			resultSet = statement.executeQuery();
			while (resultSet.next()) {
				count =resultSet.getInt(1);
			}
			return count;
		} catch (SQLException ex) {
			ex.printStackTrace();
		} finally {
			try {
				if (connection != null) {
					connection.close();
				}
				if (statement != null) {
					statement.close();
				}
				if (resultSet != null) {
					resultSet.close();
				}
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return 0;
	}
	
	@Override
	public Long insert(String sql, Object... parameters) {
		ResultSet resultSet = null;
		Long id = null;
		Connection connection = null;
		PreparedStatement statement = null;
		try {
			connection = getConnection();
			connection.setAutoCommit(false);
			statement = connection.prepareStatement(sql, statement.RETURN_GENERATED_KEYS);
			setParameter(statement, parameters);
			statement.executeUpdate();
			resultSet = statement.getGeneratedKeys();
			
			if (resultSet.next()) {
				id = resultSet.getLong(1);
			}
			
			
			connection.commit();
			return id;
		} catch (SQLException e) {
			System.out.print(" Ô Toang !");
			if (connection != null) {
				try {
					connection.rollback();
				} catch (SQLException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
			}
			return null;
		} finally {
			try {
				if (connection != null) {
					connection.close();
				}
				if (statement != null) {
					statement.close();
				}
				if (resultSet != null) {
					resultSet.close();
				}
			} catch (SQLException e) {
				e.printStackTrace();
			}

		}
	}


	@Override
	public void insertDichVu(String sql, Object... parameters) {
		ResultSet resultSet = null;
		Connection connection = null;
		PreparedStatement statement = null;
		try {
			connection = getConnection();
			connection.setAutoCommit(false);
			statement = connection.prepareStatement(sql);
			setParameter(statement, parameters);
			statement.executeUpdate();
			connection.commit();
		} catch (SQLException e) {
			System.out.print(" Ô Toang !");
			e.printStackTrace();
			if (connection != null) {
				try {
					connection.rollback();
				} catch (SQLException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
			}
		} finally {
			try {
				if (connection != null) {
					connection.close();
				}
				if (statement != null) {
					statement.close();
				}
				if (resultSet != null) {
					resultSet.close();
				}
			} catch (SQLException e) {
				e.printStackTrace();
			}

		}
		
	}

	

	
	
}

